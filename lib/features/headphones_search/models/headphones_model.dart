import 'package:hear_mate_app/shared/utils/app_id_manager.dart';

class HeadphonesModel {
  final String id;
  final String name;
  final int grade;
  final double hz125Correction;
  final double hz250Correction;
  final double hz500Correction;
  final double hz1000Correction;
  final double hz2000Correction;
  final double hz4000Correction;
  final double hz8000Correction;
  final DateTime createdAt;

  const HeadphonesModel({
    required this.id,
    required this.name,
    required this.grade,
    required this.hz125Correction,
    required this.hz250Correction,
    required this.hz500Correction,
    required this.hz1000Correction,
    required this.hz2000Correction,
    required this.hz4000Correction,
    required this.hz8000Correction,
    required this.createdAt,
  });

  factory HeadphonesModel.fromMap(Map<String, dynamic> map) {
    return HeadphonesModel(
      id: map['id'] as String,
      name: map['name'] as String,
      grade: map['grade'] as int,
      hz125Correction: (map['hz_125_correction'] as num).toDouble(),
      hz250Correction: (map['hz_250_correction'] as num).toDouble(),
      hz500Correction: (map['hz_500_correction'] as num).toDouble(),
      hz1000Correction: (map['hz_1000_correction'] as num).toDouble(),
      hz2000Correction: (map['hz_2000_correction'] as num).toDouble(),
      hz4000Correction: (map['hz_4000_correction'] as num).toDouble(),
      hz8000Correction: (map['hz_8000_correction'] as num).toDouble(),
      createdAt: DateTime.parse(map['created_at'] as String),
    );
  }

  factory HeadphonesModel.create({
    required String name,
    int? grade,
    required double hz125Correction,
    required double hz250Correction,
    required double hz500Correction,
    required double hz1000Correction,
    required double hz2000Correction,
    required double hz4000Correction,
    required double hz8000Correction,
  }) {
    return HeadphonesModel(
      id: '', // Will be generated by database
      name: name,
      grade: grade ?? 0,
      hz125Correction: hz125Correction,
      hz250Correction: hz250Correction,
      hz500Correction: hz500Correction,
      hz1000Correction: hz1000Correction,
      hz2000Correction: hz2000Correction,
      hz4000Correction: hz4000Correction,
      hz8000Correction: hz8000Correction,
      createdAt: DateTime.now(),
    );
  }

  Future<Map<String, dynamic>> toInsertMap(
    HeadphonesModel referenceHeadphone,
  ) async {
    final String owner = await AppIdManager.getAppInstanceId();
    return {
      'name': name,
      'owner': owner,
      'hz_125_correction': hz125Correction,
      'hz_250_correction': hz250Correction,
      'hz_500_correction': hz500Correction,
      'hz_1000_correction': hz1000Correction,
      'hz_2000_correction': hz2000Correction,
      'hz_4000_correction': hz4000Correction,
      'hz_8000_correction': hz8000Correction,
      'reference_score_at_insert': referenceHeadphone.grade,
      'reference_headphone': referenceHeadphone.id,
    };
  }

  double getFreq(int freq) {
    switch (freq) {
      case 125:
        return hz125Correction;
      case 250:
        return hz250Correction;
      case 500:
        return hz500Correction;
      case 1000:
        return hz1000Correction;
      case 2000:
        return hz2000Correction;
      case 4000:
        return hz4000Correction;
      case 8000:
        return hz8000Correction;
      default:
        return hz1000Correction;
    }
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'grade': grade,
      'hz_125_correction': hz125Correction,
      'hz_250_correction': hz250Correction,
      'hz_500_correction': hz500Correction,
      'hz_1000_correction': hz1000Correction,
      'hz_2000_correction': hz2000Correction,
      'hz_4000_correction': hz4000Correction,
      'hz_8000_correction': hz8000Correction,
      'created_at': createdAt.toIso8601String(),
    };
  }

  /// Copy with method for creating modified instances
  HeadphonesModel copyWith({
    String? id,
    String? name,
    int? grade,
    double? hz125Correction,
    double? hz250Correction,
    double? hz500Correction,
    double? hz1000Correction,
    double? hz2000Correction,
    double? hz4000Correction,
    double? hz8000Correction,
    DateTime? createdAt,
  }) {
    return HeadphonesModel(
      id: id ?? this.id,
      name: name ?? this.name,
      grade: grade ?? this.grade,
      hz125Correction: hz125Correction ?? this.hz125Correction,
      hz250Correction: hz250Correction ?? this.hz250Correction,
      hz500Correction: hz500Correction ?? this.hz500Correction,
      hz1000Correction: hz1000Correction ?? this.hz1000Correction,
      hz2000Correction: hz2000Correction ?? this.hz2000Correction,
      hz4000Correction: hz4000Correction ?? this.hz4000Correction,
      hz8000Correction: hz8000Correction ?? this.hz8000Correction,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is HeadphonesModel &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          grade == other.grade &&
          hz125Correction == other.hz125Correction &&
          hz250Correction == other.hz250Correction &&
          hz500Correction == other.hz500Correction &&
          hz1000Correction == other.hz1000Correction &&
          hz2000Correction == other.hz2000Correction &&
          hz4000Correction == other.hz4000Correction &&
          hz8000Correction == other.hz8000Correction &&
          createdAt == other.createdAt;

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      grade.hashCode ^
      hz125Correction.hashCode ^
      hz250Correction.hashCode ^
      hz500Correction.hashCode ^
      hz1000Correction.hashCode ^
      hz2000Correction.hashCode ^
      hz4000Correction.hashCode ^
      hz8000Correction.hashCode ^
      createdAt.hashCode;

  @override
  String toString() {
    return 'HeadphonesModel{'
        'id: $id, '
        'name: $name, '
        'grade: $grade, '
        'hz125: $hz125Correction, '
        'hz250: $hz250Correction, '
        'hz500: $hz500Correction, '
        'hz1000: $hz1000Correction, '
        'hz2000: $hz2000Correction, '
        'hz4000: $hz4000Correction, '
        'hz8000: $hz8000Correction, '
        'createdAt: $createdAt'
        '}';
  }

  factory HeadphonesModel.empty({String name = ''}) => HeadphonesModel(
    id: '',
    createdAt: DateTime.now(),
    name: name,
    grade: 0,
    hz125Correction: 0,
    hz250Correction: 0,
    hz500Correction: 0,
    hz1000Correction: 0,
    hz2000Correction: 0,
    hz4000Correction: 0,
    hz8000Correction: 0,
  );
}
